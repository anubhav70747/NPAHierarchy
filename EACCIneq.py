from __future__ import print_function
from ncpol2sdpa import *
import pickle
# just a basic code to run tri vs bi (or reverse) party NPA optimization
# use inequalities from inequalities.py
# whats up?

def list_ineq_transformed(P,c0,c1):# List of functionals on the left side of the inequalities after applying the transformation
   return  [
    # 1st inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) + 
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) +
    c1 * P([1, 1], [0, 1]) + (1 - c1) * P([1, 1], [0, 3]),

    # 2nd inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) + 
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) + 
    c0 * P([0, 1], [0, 1]) + (1 - c0) * P([0, 1], [0, 3]) +
    c0 * P([0, 1], [1, 0]) + (1 - c0) * P([0, 1], [1, 2]) -
    c1 * P([1, 1], [1, 0]) - (1 - c1) * P([1, 1], [1, 2]) -
    c0 * P([0, 1], [1, 1]) - (1 - c0) * P([0, 1], [1, 3]) +
    c1 * P([1, 0], [1, 1]) + (1 - c1) * P([1, 0], [1, 3]) +
    c1 * P([1, 1], [1, 1]) + (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) +
    c1 * P([1, 1], [2, 0]) + (1 - c1) * P([1, 1], [2, 2]) -
    c0 * P([0, 1], [2, 1]) - (1 - c0) * P([0, 1], [2, 3]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 3rd inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) +
    c0 * P([0, 1], [0, 1]) + (1 - c0) * P([0, 1], [0, 3]) +
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) +
    c1 * P([1, 1], [0, 1]) + (1 - c1) * P([1, 1], [0, 3]) +
    c0 * P([0, 1], [1, 0]) + (1 - c0) * P([0, 1], [1, 2]) -
    c1 * P([1, 1], [1, 0]) - (1 - c1) * P([1, 1], [1, 2]) -
    c0 * P([0, 1], [1, 1]) - (1 - c0) * P([0, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 1], [2, 0]) - (1 - c1) * P([1, 1], [2, 2]) +
    c0 * P([0, 1], [2, 1]) + (1 - c0) * P([0, 1], [2, 3]),

    # 4th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) +
    c0 * P([0, 1], [1, 0]) + (1 - c0) * P([0, 1], [1, 2]) +
    c1 * P([1, 1], [1, 1]) + (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 5th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) -
    c1 * P([1, 1], [1, 0]) - (1 - c1) * P([1, 1], [1, 2]) +
    c1 * P([1, 1], [1, 1]) + (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 6th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c0 * P([0, 1], [0, 1]) + (1 - c0) * P([0, 1], [0, 3]) +
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) +
    c1 * P([1, 1], [0, 1]) + (1 - c1) * P([1, 1], [0, 3]) -
    c0 * P([0, 1], [1, 1]) - (1 - c0) * P([0, 1], [1, 3]) -
    c1 * P([1, 0], [1, 1]) - (1 - c1) * P([1, 0], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 7th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) +
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) +
    c0 * P([0, 1], [1, 0]) + (1 - c0) * P([0, 1], [1, 2]) -
    c1 * P([1, 1], [1, 0]) - (1 - c1) * P([1, 1], [1, 2]) +
    c1 * P([1, 0], [1, 1]) + (1 - c1) * P([1, 0], [1, 3]) +
    c1 * P([1, 1], [1, 1]) + (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) +
    c1 * P([1, 1], [2, 0]) + (1 - c1) * P([1, 1], [2, 2]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 8th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) +
    c0 * P([0, 1], [0, 1]) + (1 - c0) * P([0, 1], [0, 3]) -
    c0 * P([0, 1], [1, 0]) - (1 - c0) * P([0, 1], [1, 2]) +
    c1 * P([1, 1], [1, 0]) + (1 - c1) * P([1, 1], [1, 2]) -
    c0 * P([0, 1], [1, 1]) - (1 - c0) * P([0, 1], [1, 3]) -
    c1 * P([1, 0], [1, 1]) - (1 - c1) * P([1, 0], [1, 3]) -
    c1 * P([1, 1], [1, 1]) - (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 1], [2, 0]) - (1 - c1) * P([1, 1], [2, 2]) +
    c0 * P([0, 1], [2, 1]) + (1 - c0) * P([0, 1], [2, 3]) +
    c1 * P([1, 0], [2, 1]) + (1 - c1) * P([1, 0], [2, 3]) +
    c1 * P([1, 1], [2, 1]) + (1 - c1) * P([1, 1], [2, 3]),

    # 9th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) +
    c0 * P([0, 1], [1, 0]) + (1 - c0) * P([0, 1], [1, 2]) -
    c1 * P([1, 1], [1, 0]) - (1 - c1) * P([1, 1], [1, 2]) +
    c1 * P([1, 0], [1, 1]) + (1 - c1) * P([1, 0], [1, 3]) +
    c1 * P([1, 1], [1, 1]) + (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 10th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 11th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c0 * P([0, 1], [0, 1]) + (1 - c0) * P([0, 1], [0, 3]) +
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) +
    c1 * P([1, 1], [0, 1]) + (1 - c1) * P([1, 1], [0, 3]) +
    c0 * P([0, 1], [1, 0]) + (1 - c0) * P([0, 1], [1, 2]) -
    c0 * P([0, 1], [1, 1]) - (1 - c0) * P([0, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3]),

    # 12th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 0], [0, 1]) + (1 - c1) * P([1, 0], [0, 3]) -
    c0 * P([0, 1], [1, 1]) - (1 - c0) * P([0, 1], [1, 3]) -
    c1 * P([1, 0], [1, 1]) - (1 - c1) * P([1, 0], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) +
    c0 * P([0, 1], [2, 1]) + (1 - c0) * P([0, 1], [2, 3]),

    # 13th inequality
    c0 * P([0, 1], [0, 0]) + (1 - c0) * P([0, 1], [0, 2]) +
    c1 * P([1, 1], [0, 0]) + (1 - c1) * P([1, 1], [0, 2]) -
    c1 * P([1, 1], [1, 0]) - (1 - c1) * P([1, 1], [1, 2]) +
    c0 * P([0, 1], [1, 1]) + (1 - c0) * P([0, 1], [1, 3]) +
    c1 * P([1, 0], [1, 1]) + (1 - c1) * P([1, 0], [1, 3]) +
    c1 * P([1, 1], [1, 1]) + (1 - c1) * P([1, 1], [1, 3]) -
    c0 * P([0, 1], [2, 0]) - (1 - c0) * P([0, 1], [2, 2]) -
    c0 * P([0, 1], [2, 1]) - (1 - c0) * P([0, 1], [2, 3]) -
    c1 * P([1, 0], [2, 1]) - (1 - c1) * P([1, 0], [2, 3]) -
    c1 * P([1, 1], [2, 1]) - (1 - c1) * P([1, 1], [2, 3])
]


def list_inq(P):
   return [0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) + 
    0.5 * P([1, 1], [0, 1]) + 0.5 * P([1, 1], [0, 3]),

    # 2nd inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) + 
    0.5 * P([0, 1], [0, 1]) + 0.5 * P([0, 1], [0, 3]) + 
    0.5 * P([0, 1], [1, 0]) + 0.5 * P([0, 1], [1, 2]) -
    0.5 * P([1, 1], [1, 0]) - 0.5 * P([1, 1], [1, 2]) -
    0.5 * P([0, 1], [1, 1]) - 0.5 * P([0, 1], [1, 3]) +
    0.5 * P([1, 0], [1, 1]) + 0.5 * P([1, 0], [1, 3]) +
    0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) +
    0.5 * P([1, 1], [2, 0]) + 0.5 * P([1, 1], [2, 2]) -
    0.5 * P([0, 1], [2, 1]) - 0.5 * P([0, 1], [2, 3]) -
    2 * (0.5 * P([1, 0], [2, 1]) + 0.5 * P([1, 0], [2, 3])) -
    2 * (0.5 * P([1, 1], [2, 1]) + 0.5 * P([1, 1], [2, 3])),

    # 3rd inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) + 
    0.5 * P([0, 1], [0, 1]) + 0.5 * P([0, 1], [0, 3]) + 
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) + 
    0.5 * P([1, 1], [0, 1]) + 0.5 * P([1, 1], [0, 3]) + 
    0.5 * P([0, 1], [1, 0]) + 0.5 * P([0, 1], [1, 2]) -
    0.5 * P([1, 1], [1, 0]) - 0.5 * P([1, 1], [1, 2]) -
    0.5 * P([0, 1], [1, 1]) - 0.5 * P([0, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 1], [2, 0]) - 0.5 * P([1, 1], [2, 2]) +
    0.5 * P([0, 1], [2, 1]) + 0.5 * P([0, 1], [2, 3]),

    # 4th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) + 
    0.5 * P([0, 1], [1, 0]) + 0.5 * P([0, 1], [1, 2]) + 
    0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 0], [2, 1]) - 0.5 * P([1, 0], [2, 3]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 5th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) -
    0.5 * P([1, 1], [1, 0]) - 0.5 * P([1, 1], [1, 2]) +
    0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 6th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([0, 1], [0, 1]) + 0.5 * P([0, 1], [0, 3]) + 
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) + 
    0.5 * P([1, 1], [0, 1]) + 0.5 * P([1, 1], [0, 3]) -
    0.5 * P([0, 1], [1, 1]) - 0.5 * P([0, 1], [1, 3]) -
    0.5 * P([1, 0], [1, 1]) - 0.5 * P([1, 0], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 7th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) + 
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) + 
    0.5 * P([0, 1], [1, 0]) + 0.5 * P([0, 1], [1, 2]) -
    0.5 * P([1, 1], [1, 0]) - 0.5 * P([1, 1], [1, 2]) +
    0.5 * P([1, 0], [1, 1]) + 0.5 * P([1, 0], [1, 3]) +
    2 * (0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3])) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) +
    0.5 * P([1, 1], [2, 0]) + 0.5 * P([1, 1], [2, 2]) -
    2 * (0.5 * P([1, 0], [2, 1]) + 0.5 * P([1, 0], [2, 3])) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 8th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) + 
    0.5 * P([0, 1], [0, 1]) + 0.5 * P([0, 1], [0, 3]) -
    0.5 * P([0, 1], [1, 0]) - 0.5 * P([0, 1], [1, 2]) +
    0.5 * P([1, 1], [1, 0]) + 0.5 * P([1, 1], [1, 2]) -
    0.5 * P([0, 1], [1, 1]) - 0.5 * P([0, 1], [1, 3]) -
    2 * (0.5 * P([1, 0], [1, 1]) + 0.5 * P([1, 0], [1, 3])) -
    2 * (0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3])) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 1], [2, 0]) - 0.5 * P([1, 1], [2, 2]) +
    0.5 * P([0, 1], [2, 1]) + 0.5 * P([0, 1], [2, 3]) +
    0.5 * P([1, 0], [2, 1]) + 0.5 * P([1, 0], [2, 3]) +
    0.5 * P([1, 1], [2, 1]) + 0.5 * P([1, 1], [2, 3]),

    # 9th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) +
    0.5 * P([0, 1], [1, 0]) + 0.5 * P([0, 1], [1, 2]) -
    0.5 * P([1, 1], [1, 0]) - 0.5 * P([1, 1], [1, 2]) +
    0.5 * P([1, 0], [1, 1]) + 0.5 * P([1, 0], [1, 3]) +
    0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 0], [2, 1]) - 0.5 * P([1, 0], [2, 3]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 10th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 0], [2, 1]) - 0.5 * P([1, 0], [2, 3]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 11th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([0, 1], [0, 1]) + 0.5 * P([0, 1], [0, 3]) + 
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) + 
    0.5 * P([1, 1], [0, 1]) + 0.5 * P([1, 1], [0, 3]) +
    0.5 * P([0, 1], [1, 0]) + 0.5 * P([0, 1], [1, 2]) -
    0.5 * P([0, 1], [1, 1]) - 0.5 * P([0, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([1, 0], [2, 1]) - 0.5 * P([1, 0], [2, 3]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3]),

    # 12th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) +
    0.5 * P([1, 0], [0, 1]) + 0.5 * P([1, 0], [0, 3]) -
    0.5 * P([0, 1], [1, 1]) - 0.5 * P([0, 1], [1, 3]) -
    0.5 * P([1, 0], [1, 1]) - 0.5 * P([1, 0], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) +
    0.5 * P([0, 1], [2, 1]) + 0.5 * P([0, 1], [2, 3]),

    # 13th inequality
    0.5 * P([0, 1], [0, 0]) + 0.5 * P([0, 1], [0, 2]) + 
    0.5 * P([1, 1], [0, 0]) + 0.5 * P([1, 1], [0, 2]) -
    0.5 * P([1, 1], [1, 0]) - 0.5 * P([1, 1], [1, 2]) +
    0.5 * P([0, 1], [1, 1]) + 0.5 * P([0, 1], [1, 3]) +
    0.5 * P([1, 0], [1, 1]) + 0.5 * P([1, 0], [1, 3]) +
    0.5 * P([1, 1], [1, 1]) + 0.5 * P([1, 1], [1, 3]) -
    0.5 * P([0, 1], [2, 0]) - 0.5 * P([0, 1], [2, 2]) -
    0.5 * P([0, 1], [2, 1]) - 0.5 * P([0, 1], [2, 3]) -
    0.5 * P([1, 0], [2, 1]) - 0.5 * P([1, 0], [2, 3]) -
    0.5 * P([1, 1], [2, 1]) - 0.5 * P([1, 1], [2, 3])]



def __main__():

  P = Probability([2, 2, 2], [2, 2, 2, 2])
  list_inq1 = list_inq(P)
  for inq in list_inq1:
     Objective = inq # set objective function
  #  Constraints = P([0],[0],['A']) # set primary constraint inequality

  # set primary constraints here
     ineq = []
  #ineq.append(Constraints - 0.45)
  #ineq.append(-1*Constraints + 0.45)
# prepare relaxation
     sdpRelaxation = SdpRelaxation(P.get_all_operators(), verbose=0)
     sdpRelaxation.get_relaxation(2, substitutions = P.substitutions,momentinequalities = ineq)
     sdpRelaxation.set_objective(-Objective)
     sdpRelaxation.solve(solver="mosek")
# collect data points
     print(abs(sdpRelaxation.primal))

if __name__=="__main__":
   __main__()
